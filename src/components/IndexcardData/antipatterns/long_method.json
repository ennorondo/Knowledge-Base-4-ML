{
    "antiPatterns": [
        {
            "name": "Long Method",
            "aliases": [
                "Spaghetti Code"
            ],
            "description": "A method contains too many lines of code. Generally, any method longer than ten lines should make you start asking questions. Spaghetti Code appears as a program or system that contains very little software structure.",
            "context": "Does an increase in the number of methods hurt performance, as many people claim? In almost all cases the impact is so negligible that it’s not even worth worrying about. Plus, now that you have clear and understandable code, you’re more likely to find truly effective methods for restructuring code and getting real performance gains if the need ever arises.",
            "detection": "Minimal relationships exist between objects. Many object methods have no parameters, and utilize class or global variables for processing. Difficult to reuse the code.",
            "consequences": "",
            "cause": "No design prior to implementation. Like the Hotel California, something is always being added to a method but nothing is ever taken out. Since it's easier to write code than to read it, this smell remains unnoticed until the method turns into an ugly, oversized beast. Mentally, it's often harder to create a new method than to add to an existing one: \"But it's just two lines, there's no use in creating a whole method just for that...\" Which means that another line is added and then yet another, giving birth to a tangle of spaghetti code.",
            "solution": "The first goal is to achieve a satisfactory structure. As a rule of thumb, if you feel the need to comment on something inside a method, you should take this code and put it in a new method. Even a single line can and should be split off into a separate method, if it requires explanations. And if the method has a descriptive name, nobody will need to look at the code to see what it does. Extract Method; Introduce Parameter Object",
            "example": "",
            "sources": [
                "@book{Fowler, title={Refactoring: improving the design of existing code}, author={Fowler, Martin}, year={2018}, publisher={Addison-Wesley Professional}}",
                "@book{Kerievsky, author = {Kerievsky, Joshua}, title = {Refactoring to Patterns}, year = {2004}, isbn = {0321213351}, publisher = {Pearson Higher Education}}",
                "@book{Brown, author = {Brown, William H. and Malveau, Raphael C. and McCormick, Hays W. \"Skip\" and Mowbray, Thomas J.}, title = {AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis}, year = {1998}, isbn = {0471197130, 9780471197133}, edition = {1st}, publisher = {John Wiley & Sons, Inc.}, address = {New York, NY, USA}}",
                "@book{Wake, author = {Wake, William C.}, title = {Refactoring Workbook}, year = {2003}, isbn = {0321109295}, edition = {1}, publisher = {Addison-Wesley Longman Publishing Co., Inc.}, address = {Boston, MA, USA}}",
                "@article{Mantyla, author = {Mäntylä, Mika V. and Lassenius, Casper}, title = {Subjective Evaluation of Software Evolvability Using Code Smells: An Empirical Study}, journal = {Empirical Software Engineering}, issue_date = {September 2006}, volume = {11}, number = {3}, month = sep, year = {2006}, issn = {1382-3256}, pages = {395--431}, numpages = {37}, url = {http://dx.doi.org/10.1007/s10664-006-9002-8}, doi = {10.1007/s10664-006-9002-8}, acmid = {1146489}, publisher = {Kluwer Academic Publishers}, address = {Hingham, MA, USA}, keywords = {Code metrics, Code smells, Evolvability, Human factors, Maintainability, Perceived evaluation, Software metrics, Subjective evaluation}}",
                "@online{RefactoringGuru-Refactoring, author = {Shvets, Alexander}, title = {Refactoring: clean your code}, date = {2014/2019}, url = {https://refactoring.guru/refactoring}, urldate = {2019-04-24}}",
                "@online{Codinghorror, author = {Atwood, Jeff}, title = {Code Smells}, date = {2006-05-18}, url = {https://blog.codinghorror.com/code-smells/}, urldate = {2019-04-24}}",
                "@online{Sourcemaking-Antipatterns, author = {Shvets, Alexander and Frey, Gerhard and Pavlova, Marina}, title = {AntiPatterns}, date = {2007/2019}, url = {https://sourcemaking.com/antipatterns}, urldate = {2019-04-24}}"
            ],
            "tags": [
                "soa",
                "microservices",
                "application",
                "The Bloaters",
                "within classes"
            ],
            "relatedItems": [
                {
                    "relation": "",
                    "name": ""
                }
            ]
        }
    ]
}
