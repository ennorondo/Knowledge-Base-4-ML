{
  "antiPatterns": [
    {
      "name": "Stovepipe System",
      "aliases": [
        "Alternative Classes with Different Interfaces",
        "Duplicate Abstraction",
        "Multilayer Service",
        "Stovepipe Enterprise",
        "Autogenerated Stovepipe",
        "Stovepipe Service",
        "Reinvent the Wheel",
        "Extraneous Adjacent Connector"
      ],
      "description": "Multiple systems within an enterprise are designed independently at every level. It occurs when the interface of two classes are different and yet the classes are quite similar. Subsystems are integrated in an ad hoc manner using multiple integration strategies and mechanisms.",
      "context": "Stovepipe is a popular term used to describe software systems with ad hoc architectures. It is a metaphor to the exhaust pipes of wood-burning stoves, so-called pot-bellied stoves. Since wood burning produces corrosive substances that erode metal, a stovepipe must be constantly maintained and repaired in order to avoid leakage. Often, the pipes are repaired with any materials at hand, thus wood-burning stovepipes quickly become a hodgepodge of ad hoc repairs - hence, the reference is used to describe the ad hoc structure of many software systems.",
      "detection": "Identical Name or Identical Implementation. Stovepipe services typically have a large number of private implementation methods. Monolithic and undocumented architectures.",
      "consequences": "Technical and utility functions are implemented inconsistently. Development time of stovepipe services is considerably larger. Duplicated code and different implementations for the same functionality also has a negative impact on maintainability. Lack of commonality inhibits interoperability between systems, prevents reuse, and drives up cost; in addition, reinvented system architecture and services lack quality structure supporting adaptability.",
      "cause": "Inexperience in developing multilayer architectures is one reason that can result in stovepipe services. They can also be caused by insufficient team communication and a lack of design or code reviews.",
      "solution": "Refactor the common private methods of all services into new technical services or utility classes with a common interface. Alternatively, these functionality can be refactored to a new super class from which all services can inherit. Coordination of technologies at several levels is essential to avoid a Stovepipe Enterprise. Initially, the selection of standards can be coordinated through the definition of a standards reference model.",
      "example": "A service implements private methods for technical tasks such as 'auditEvent' or 'notify' which might also be implemented by other services.",
      "sources": [
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}",
        "@inproceedings{garcia2009toward, author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad}, title = {Toward a Catalogue of Architectural Bad Smells}, booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems}, series = {QoSA '09}, year = {2009}, isbn = {978-3-642-02350-7}, location = {East Stroudsburg, PA, USA}, pages = {146--162}, numpages = {17}, url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10}, doi = {10.1007/978-3-642-02351-4_10}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}}",
        "@inproceedings{de2014architectural, author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica}, year = {2014}, month = {04}, pages = {12}, title = {Architectural bad smells in Software Product Lines: An exploratory study}, journal = {ACM International Conference Proceeding Series}, doi = {10.1145/2578128.2578237}}",
        "@online{Sourcemaking-Antipatterns, author = {Shvets, Alexander and Frey, Gerhard and Pavlova, Marina}, title = {AntiPatterns}, date = {2007/2019}, url = {https://sourcemaking.com/antipatterns}, urldate = {2019-04-24}}",
        "@book{Fowler, title={Refactoring: improving the design of existing code}, author={Fowler, Martin}, year={2018}, publisher={Addison-Wesley Professional}}",
        "@book{Kerievsky, author = {Kerievsky, Joshua}, title = {Refactoring to Patterns}, year = {2004}, isbn = {0321213351}, publisher = {Pearson Higher Education}}",
        "@book{Wake, author = {Wake, William C.}, title = {Refactoring Workbook}, year = {2003}, isbn = {0321109295}, edition = {1}, publisher = {Addison-Wesley Longman Publishing Co., Inc.}, address = {Boston, MA, USA}}",
        "@article{Mantyla, author = {Mäntylä, Mika V. and Lassenius, Casper}, title = {Subjective Evaluation of Software Evolvability Using Code Smells: An Empirical Study}, journal = {Empirical Software Engineering}, issue_date = {September 2006}, volume = {11}, number = {3}, month = sep, year = {2006}, issn = {1382-3256}, pages = {395--431}, numpages = {37}, url = {http://dx.doi.org/10.1007/s10664-006-9002-8}, doi = {10.1007/s10664-006-9002-8}, acmid = {1146489}, publisher = {Kluwer Academic Publishers}, address = {Hingham, MA, USA}, keywords = {Code metrics, Code smells, Evolvability, Human factors, Maintainability, Perceived evaluation, Software metrics, Subjective evaluation}}",
        "@online{RefactoringGuru-Refactoring, author = {Shvets, Alexander}, title = {Refactoring: clean your code}, date = {2014/2019}, url = {https://refactoring.guru/refactoring}, urldate = {2019-04-24}}",
        "@online{Codinghorror, author = {Atwood, Jeff}, title = {Code Smells}, date = {2006-05-18}, url = {https://blog.codinghorror.com/code-smells/}, urldate = {2019-04-24}}",
        "@book{Suryanarayana, author = {Suryanarayana, Girish and Samarthyam, Ganesh and Sharma, Tushar}, title = {Refactoring for Software Design Smells: Managing Technical Debt}, year = {2014}, isbn = {0128013974,\newline 9780128013977}, edition = {1st}, publisher = {Morgan Kaufmann Publishers Inc.}, address = {San Francisco, CA, USA}}"
      ],
      "tags": [
        "soa",
        "architecture",
        "ambiguity",
        "The Object-Orientation Abusers",
        "between classes"
      ],
      "relatedItems": [
        {
          "relation": "relates",
          "name": "Scattered Parasitic Functionality"
        },
        {
          "relation": "relates",
          "name": "Architecture by Implication"
        },
        {
          "relation": "relates",
          "name": "Duplicated Code"
        }
      ]
    }
  ]
}
