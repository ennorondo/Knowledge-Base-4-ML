{
  "antiPatterns": [
    {
      "name": "Wrong Cuts",
      "aliases": [
        "Transactional Integration"
      ],
      "description": "Services are split on the basis of technical layers (presentation, business, and data layers) instead of business capabilities. Transactions extend across service boundaries and are not isolated inside services.",
      "context": "",
      "detection": "",
      "consequences": "Such a wrong separation of concerns can lead to increased data-splitting complexity. Moreover, this may cause ripple effects on changes and therefore decreases maintainability. Lastly, it may impact performance, if several services are needed to fulfill an abstraction.",
      "cause": "Rapidly evolving business processes may result in such transactions. Starting the design of an SOA completely upfront without keeping some design decisions open may also lead to this antipattern.",
      "solution": "Perform a clear analysis of business processes and the need for resources and use this knowledge to refactor the services according to bounded contexts. Resolve the transactional integration by using one of the patterns Orchestration, Saga or Inversion of Communications.",
      "example": "",
      "sources": [
        "@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}",
        "@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}"
      ],
      "tags": [
        "microservices",
        "architecture",
        "cohesion",
        "The Couplers"
      ],
      "relatedItems": [
        {
          "relation": "follows",
          "name": "Data Class"
        },
        {
          "relation": "follows",
          "name": "Message Chain"
        }
      ]
    }
  ]
}
