{
  "antiPatterns": [
    {
      "name": "No Legacy",
      "aliases": [
        ""
      ],
      "description": "A legacy application is completely rewritten instead of being (partly) modernized and integrated.",
      "context": "Management does not want to keep a legacy system of decent quality and therefore wants to rewrite the entire application. The idea is that obsolete parts should be dropped and integration and modernization efforts are perceived to be similar to a complete rewrite. However, since SOA usually enables the efficient integration of applications, a complete rewrite of the legacy system should require much more efforts.",
      "detection": "",
      "consequences": "Very high investments and considerable risk are associated with a complete rewrite of large complex systems.",
      "cause": "Project management does not understand that integrating legacy systems into a new SOA environment does not necessarily have to be a bad thing.",
      "solution": "Project management first has to accept that stable and solid parts of a legacy systems are worth keeping. Integration candidates have to be chosen and modernized with user-oriented interfaces. Front-end gates can be used to achieve this.",
      "example": "",
      "sources": [
        "@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}"
      ],
      "tags": [
        "soa",
        "business",
        "legacy",
        "migration"
      ],
      "relatedItems": [
        {
          "relation": "precedes",
          "name": "Big Bang"
        },
        {
          "relation": "precedes",
          "name": "Nothing New"
        },
        {
          "relation": "relates",
          "name": "Vendor Lock-In"
        }
      ]
    }
  ]
}
