{
  "antiPatterns": [
    {
      "name": "The God Object",
      "aliases": [
        "Megaservice",
        "Multiservice",
        "The Blob",
        "God Object Web Service",
        "Big Ball of Mud",
        "Swiss Army Knife",
        "God Class",
        "Insufficient Modularization"
      ],
      "description": "A service that provides a large number of operations for multiple different business and technical abstractions. Has bloated interface and implementation.",
      "context": "",
      "detection": "The service possesses a variety of public interface operations that are related to different domains or entities.",
      "consequences": "Having only a few or even a single large service within the system may impact maintainability, performance, and availability. A very large service is harder to analyze and comprehend. Furthermore, multiple developers will concurrently work on the same service, which can cause conflicts and unnecessary redeployments. Such a service will also have many consumers and therefore increases coupling in the system. Any changes to its interface result in ripples to these consumers. Moreover, unit testing such a service becomes very time consuming due the dependencies within the service. The size and complexity of the service can also mean that deploying the service needs special configuration. Lastly, such a service may become a performance bottleneck or a single point of failure.",
      "cause": "Hidden or unclear requirements may make it difficult to identify fitting abstractions. Wrongly applied patterns like the Session Facade may also lead to a megaservice. The service designer may also be unfamiliar with the principles of high cohesion and low coupling.",
      "solution": "The megaservice should be decomposed into several smaller services. The service's inappropriate methods need to be extracted to new interfaces.",
      "example": "A service that implements operations for ordering, paying, and shipping.",
      "sources": [
        "@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}",
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}",
        "@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}",
        "@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}",
        "@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}",
        "@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}",
        "@book{Suryanarayana, author = {Suryanarayana, Girish and Samarthyam, Ganesh and Sharma, Tushar}, title = {Refactoring for Software Design Smells: Managing Technical Debt}, year = {2014}, isbn = {0128013974,\newline 9780128013977}, edition = {1st}, publisher = {Morgan Kaufmann Publishers Inc.}, address = {San Francisco, CA, USA}}",
        "@INPROCEEDINGS{Sharma, author={T. {Sharma} and M. {Fragkoulis} and D. {Spinellis}}, booktitle={2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR)}, title={Does Your Configuration Code Smell?}, year={2016}, volume={}, number={}, pages={189-200}, keywords={software maintenance;software quality;configuration management system;smell category;puppet repositories;code quality management;software engineering knowledge;computing system configurations;IaC;infrastructure as code;configuration code;Best practices;Software;Software engineering;Correlation;Context;Production;Data mining;Infrastructure as Code;Code quality;Configuration smells;Technical debt;Maintainability}, doi={10.1109/MSR.2016.028}, ISSN={}, month={May}}",
        "@book{Riel, author = {Riel, Arthur J.}, title = {Object-Oriented Design Heuristics}, year = {1996}, isbn = {020163385X}, publisher = {Addison-Wesley Longman Publishing Co., Inc.}, address = {Boston, MA, USA}}"
      ],
      "tags": [
        "microservices",
        "soa",
        "architecture",
        "cohesion",
        "abstraction",
        "The Bloaters",
        "within classes"
      ],
      "relatedItems": [
        {
          "relation": "relates",
          "name": "Multifaceted Abstraction"
        }
      ]
    }
  ]
}
