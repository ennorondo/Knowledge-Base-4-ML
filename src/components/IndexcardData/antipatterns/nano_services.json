{
  "antiPatterns": [
    {
      "name": "Nanoservices",
      "aliases": [
        "Tiny Service",
        "Refactor Mercilessly",
        "Fine Grained Web Service",
        "Fine-Grained Services",
        "Fine-Grained Interfaces",
        "Solution Sprawl"
      ],
      "description": "A service is too fine-grained so that its communication and maintenance efforts outweigh its utility. Such services often require several other coupled services to complete an abstraction.",
      "context": "An SOA is often created by combining several relatively simple services. These services may not have been built with an SOA scenario in mind, but may rely more on simple RPC interaction. This may produce a large number of calls between services.",
      "detection": "A nanoservice interface provides only one or very few operations. A nanoservice generally implements an incomplete subset of one abstraction.",
      "consequences": "Bad performance, fragmented logic, and an overhead in maintenance efforts. The functionality of one core abstraction is scattered across multiple services. This means multiple services may have to be changed to address a single feature or concept. Testing such a feature therefore also involves several services.",
      "cause": "Hidden or unclear requirements make it very hard to identify fitting abstractions. Sometimes, individual use cases are therefore mapped to separate services. Misunderstanding or wrongly applying patterns may also lead to nanoservices. One example for this is the EJB Command pattern.",
      "solution": "Consolidate and merge the scattered, but related functionality into a single service.",
      "example": "Single services for creating an order, delivering an order, updating an order, and approving an order.",
      "sources": [
        "@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}",
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}",
        "@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}",
        "@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}",
        "@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}",
        "@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}",
        "@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}",
        "@book{Kerievsky, author = {Kerievsky, Joshua}, title = {Refactoring to Patterns}, year = {2004}, isbn = {0321213351}, publisher = {Pearson Higher Education}}",
        "@online{Codinghorror, author = {Atwood, Jeff}, title = {Code Smells}, date = {2006-05-18}, url = {https://blog.codinghorror.com/code-smells/}, urldate = {2019-04-24}}",
        "@book{Lippert, title={Refactoring in large software projects: performing complex restructurings successfully}, author={Lippert, Martin and Roock, Stephen}, year={2006}, publisher={John Wiley & Sons}}"
      ],
      "tags": [
        "microservices",
        "soa",
        "architecture",
        "abstraction",
        "The Dispensables",
        "between classes"
      ],
      "relatedItems": [
        {
          "relation": "precedes",
          "name": "Nothing New"
        },
        {
          "relation": "precedes",
          "name": "Vendor Lock-In"
        },
        {
          "relation": "follows",
          "name": "Big Bang"
        },
        {
          "relation": "follows",
          "name": "Chatty Service"
        },
        {
          "relation": "relates",
          "name": "Lazy Class"
        },
        {
          "relation": "relates",
          "name": "Cyclic Dependency"
        },
        {
          "relation": "precedes",
          "name": "Sand Pile"
        }
      ]
    }
  ]
}
